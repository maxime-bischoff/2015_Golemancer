/**********************************************
Transform vertex
Color pixel
***********************************************/
#include "common.h"

float3 matColor : DIFFUSE
<
string UIName = "Material Color";
> = {0,0,0};

float3 lightColor : DIFFUSE
<

> = {1,1,1};

float4 lightDir : DIRECTION
<
	string Space = "World";
> = {0,1,0,0};

float3 ambient : DIFFUSE
<
> = {0.2,0.2,0.2};

texture diffuseSpec
<
	string UIName = "Diffuse Texture";
	string name = "default_texture.dds";
	string TextureType = "2D";
>;

sampler2D diffuseSpecMap <
string UIName = "Diffuse - Spec";
> = sampler_state{
	Texture = <diffuseSpec>;
	WrapS = Repeat;
	WrapT = Repeat;

	MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};



float3 specLightColor : DIFFUSE
<
> = {1,1,1};

float matShininess
<
	string UIWidget = "slider";
	float UIMin = 1.0;
	float UIMax = 100.0;
> = 25.0;

float matFresnel
<
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
> = 0.0;

texture normalTex
<
	string UIName = "Normal Texture";
	string name = "default_texture.dds";
	string TextureType = "2D";
>;

sampler2D normalMap
<
string UIName = "Normal";
> = sampler_state{
	Texture = <normalTex>;
	WrapS = Repeat;
	WrapT = Repeat;

	MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};

float normalStrength
<
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
> = 1.0f;

float3 skyColor :  DIFFUSE
<
> = {0,1,1};

float3 groundColor :  DIFFUSE
<
> =  {1,1,0};


texture reflectionTexture
<
	string UIName = "Reflection Texture";
	string name = "default_texture.dds";
	string ResourceType = "Cube";
>;

samplerCUBE cubeMap
<
string UIName = "Cube Map";
> = sampler_state
{
	Texture = <reflectionTexture>;
	MinFilter = LinearMipMapLinear;
  	MagFilter = Linear;
	WrapR = ClampToEdge;
	WrapS = ClampToEdge;
	WrapT = ClampToEdge;
};


float reflectionStrength
<
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
> = 1.0;

float reflectionMetalness
<
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
> = 1.0;

float reflectionRoughness
<
	string UIWidget = "slider";
	float UIMin = 0.0;
	float UIMax = 1.0;
> = 1.0;

float metalnessCorrection
<
	string UIWidget = "slider";
	float UIMin = 1.0;
	float UIMax = 6.0;
> = 1.0;

float3 fresnelColor : DIFFUSE
<
> = {0,0,0};

float fresnelStrength
<
	string UIWidget = "slider";
	float UIMin = 0;
	float UIMax = 1;
> = 0;

float fresnelWidth
<
	string UIWidget = "slider";
	float UIMin = 0;
	float UIMax = 3;
> = 2;

float emissiveStrenght
<
	string UIWidget = "slider";
	float UIMin = 0;
	float UIMax = 1;
> = 0;

texture emissiveReflecTex
<
	string UIName = "Exmissive Texture";
	string name = "default_texture.dds";
	string TextureType = "2D";
>;

sampler2D emissiveReflecMap
<
string UIName = "Emissive - Reflection";
> = sampler_state{
	Texture = <emissiveReflecTex>;
	WrapS = Repeat;
	WrapT = Repeat;

	MinFilter = LinearMipMapLinear;
    MagFilter = Linear;
};



texture shieldTex
<
	string RessourceType = "2D";
	string name = "default_texture.dds";
>;


sampler2D shieldMap
<
string UIName = "Shield tex";
> = sampler_state{
	Texture = <shieldTex>;
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	MaxAnisotropy = 4;
	LODBias = -.5;
};

texture shieldHeightTex
<
	string RessourceType = "2D";
	string name = "default_texture.dds";
>;


sampler2D shieldHeightMap
<
string UIName = "Shield Height Map";
> = sampler_state{
	Texture = <shieldHeightTex>;
	WrapS = Repeat;
	WrapT = Repeat;
	MinFilter = LinearMipMapLinear;
	MagFilter = Linear;
	MaxAnisotropy = 4;
	LODBias = -.5;
};


float3 shieldColor : DIFFUSE
<> = {0,0,0};


float shieldOpacity
<
	float UIMin = 0;
	float UIMax = 1;
> = 1;

float shieldWidth
<
	float UIMin = 0;
	float UIMax = 10.0f;
> = 0.025;

float shieldVisibleArea
<
	float UIMin = 0;
	float UIMax = 1;
> = 1;

float noiseOpacity
<
	float UIMin = 0;
	float UIMax = 1;
> = 1;


float time : Time;



struct appData
{
	float4 pos 			: POSITION ; // position 3d objet
	float3 N 			: NORMAL ;
	float3 T			: TANGENT ;
	float2 UV 			: TEXCOORD0 ;
};


struct v2f
{
	float4 pos 		: POSITION ; // position 2d projet√©e
	half3 L 		:  TEXCOORD0;
	half3 V 		: TEXCOORD1;
	half2 UV 		: TEXCOORD2;
	float3 wPos : TEXCOORD3;
	half3 upVec 	: TEXCOORD4;
	half3 N :		 TEXCOORD5;
};



//================================================================================
//vertex shader
//================================================================================
v2f vShader( appData i)
{
	v2f o;
	o.pos = mul(worldViewProj,i.pos);	//transform to view and project
	float3 P = mul(world, i.pos).xyz ;//world vertex position
	float3 N = mul(world, float4(i.N, 0)).xyz;
	float3 T = mul(world, float4(i.T, 0)).xyz;
	float3 B = cross(N,T);

	float3x3 worldToTangent = float3x3(T,B,N);

	//View Vector
	float3 E = viewInverseTranspose[3].xyz;
	float3 Vworld = E-P;
	o.V= mul(worldToTangent, Vworld);

	//Light Vector
	o.L = mul( worldToTangent, -lightDir.xyz );
	//o.wPos = mul(world, i.pos).xyz;
	o.upVec = mul(worldToTangent, float3(0,1,0));
	o.UV = i.UV;
	o.N = mul(worldToTangent,float3(i.N) ).xyz;
return o;
}

//=================================================================
//pixel shader
//=================================================================
float4 pShader( v2f i ) : COLOR
{

	float4 o = float4(1,1,1,1);

	half2 UV = i.UV;
	half3 V = normalize( i.V );
	half3 L = i.L;
	half2 Nxy = tex2D(normalMap  , i.UV ).ga*2-1 ;

	//Nxy = normalize(Nxy + lerp(0,Nxy2, normalStrength ));

	half3 N ;//= half3( Nxy, sqrt(1- Nxy.x*Nxy.x - Nxy.y*Nxy.y ) );
	//N = lerp(i.N, N,normalStrength);
	//N = normalize(N);
	N = i.N;
	half3 RV = reflect( -V, N );

	float dotProductUp = dot(N, i.upVec );


	float3 R = reflect(L, N);
	float3 H = normalize(V+L); //Halfway



	float fresnel = saturate(2-matFresnel-saturate(dot(N,V)));
	float shadeDot =  saturate( dot(N, L));


	half4 matDS = tex2D(diffuseSpecMap  , i.UV ) ;
	half4 matER = tex2D(emissiveReflecMap  , i.UV ) ;

	half3 texColor = matDS.rgb;
	half specMask = matDS.a;
	half3 emiColor = matER.rgb;
	half reflecMask = matER.a;
	

	half3 cubeColor =  texCUBE(cubeMap, -reflect(V,N) , reflectionRoughness, reflectionRoughness ).rgb;



	float diffuseLight = saturate(dot(N,L));
	float specularLight = pow(saturate(dot(-V,R)),matShininess);

	half3 diffuse = diffuseLight * lightColor;
	half3 specular = specularLight * specLightColor ;

	half3 glow =  fresnelColor * (1 - saturate(dot(N, V) * fresnelWidth)) * fresnelStrength;


 	half3 groundSkyColor =  lerp( groundColor, skyColor,  dotProductUp * 0.5 +0.5  ) ;
 	texColor.rgb = lerp( texColor.rgb , lerp(cubeColor.rgb,  cubeColor.rgb * texColor.rgb *metalnessCorrection,    reflectionMetalness)  ,  reflectionStrength * reflecMask);
	texColor.rgb += glow;


	o.rgb = texColor.rgb * (diffuse + ambient + groundSkyColor)  + specular * specMask * fresnel  + emiColor * emissiveStrenght ;






//o.rgb = dotProductUp;
	o.a = 1;
	return o;
}





//================================================================================
//vertex shader pass2
//================================================================================
v2f vShader2( appData i)
{
	v2f o;

	//float4 shieldHeightMapColor =  tex2D(shieldHeightMap, i.UV ) ;



	i.pos = float4( i.pos.xyz + (i.N * shieldWidth ), 1 );
	o.pos = mul(worldViewProj,i.pos) ;	//transform to view and project
	o.N = mul(world, float4(i.N, 0)).xyz;
	o.wPos = mul(world, i.pos).xyz;
	o.UV = i.UV;

	return o;

}

//=================================================================
//pixel shader pass2
//=================================================================
float4 pShader2( v2f i ) : COLOR
{

	float4 o;

	float3 E = viewInverseTranspose[3].xyz;//get eye position
	float3 V = normalize(E-i.wPos); //Pixel to eye

	i.N = normalize(i.N);
	float3 noise = tex2D( shieldMap , i.UV + float2( time/50 , time/50) ) ;


	float fresnel = 1- saturate(dot(V, i.N));

	float value = min( dot(i.N,V) + (1-shieldVisibleArea), 1);
	o.rgb = shieldColor*fresnel    ;
	o.a = (1-value)  * lerp( 1, (noise ), noiseOpacity) *  shieldOpacity ;

	return o;

}





//---------------------------------------------
technique t0
{
	pass p0
    {
		VertexProgram   = compile VS_PROFILE vShader();
		FragmentProgram = compile PS_PROFILE pShader();
    }

      pass p1
    {
   		/*AlphaBlendEnable = True;
   		FrontFace = CCW;
   		CulLFaceENable = True;
		AlphaFunc = float2(GEqual,.5);*/
   		//BlendFunc = int2(SrcAlpha, OneMinusSrcAlpha);
	//	DepthMask = false;

		VertexProgram   = compile VS_PROFILE vShader2();
		FragmentProgram = compile PS_PROFILE pShader2();
    }
		
}
